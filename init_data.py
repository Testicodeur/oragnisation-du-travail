#!/usr/bin/env python3
"""
Script pour initialiser les donn√©es de production
√Ä ex√©cuter avec : python init_data.py
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
sys.path.append('/opt/render/project/src/backend')

django.setup()

from django.utils import timezone
from users.models import User
from work.models import Project, Task, SubTask, Comment, Doc, TimeEntry, Event

def main():
    print("üöÄ Initialisation des donn√©es de production...")
    
    # V√©rifier si des donn√©es existent d√©j√†
    if User.objects.filter(personal_identifier__in=["admin", "romain"]).exists():
        print("‚ÑπÔ∏è Les donn√©es existent d√©j√†")
        print(f"   - {User.objects.count()} utilisateurs")
        print(f"   - {Project.objects.count()} projets")
        print(f"   - {Task.objects.count()} t√¢ches")
        return

    try:
        # Cr√©er les utilisateurs de d√©monstration
        admin_user = User.objects.create_user(
            personal_identifier="admin",
            email="admin@orgwork.com",
            password="admin123",
            first_name="Admin",
            last_name="System",
            is_staff=True,
            is_superuser=True
        )
        print("‚úÖ Utilisateur admin cr√©√©")
        
        romain = User.objects.create_user(
            personal_identifier="romain",
            email="romain@orgwork.com", 
            password="password",
            first_name="Romain",
            last_name="Regnier",
            is_staff=True,
            is_superuser=True
        )
        print("‚úÖ Utilisateur romain cr√©√©")
        
        thibaud = User.objects.create_user(
            personal_identifier="thibaud",
            email="thibaud@orgwork.com",
            password="password", 
            first_name="Thibaud",
            last_name="Martin",
            is_staff=True
        )
        print("‚úÖ Utilisateur thibaud cr√©√©")

        # Cr√©er les projets de d√©monstration
        project1 = Project.objects.create(
            name="Site client NovaTech",
            description="D√©veloppement du portail client pour NovaTech",
            client="NovaTech",
            status="active",
            category="dev"
        )
        print(f"‚úÖ Projet '{project1.name}' cr√©√©")

        project2 = Project.objects.create(
            name="Application mobile TaskFlow",
            description="Application de gestion de t√¢ches mobile",
            client="TaskFlow Inc",
            status="active", 
            category="dev"
        )
        print(f"‚úÖ Projet '{project2.name}' cr√©√©")

        # Cr√©er les t√¢ches de d√©monstration
        task1 = Task.objects.create(
            project=project1,
            title="Setup CI/CD Pipeline",
            description="Mise en place du pipeline d'int√©gration continue",
            status="doing",
            priority="high",
            assignee=romain,
            due_date=timezone.now().date() + timezone.timedelta(days=2)
        )
        print(f"‚úÖ T√¢che '{task1.title}' cr√©√©e")

        task2 = Task.objects.create(
            project=project1,
            title="Design landing page",
            description="Conception de la page d'accueil",
            status="todo",
            priority="medium",
            assignee=thibaud,
            due_date=timezone.now().date() + timezone.timedelta(days=1)
        )
        print(f"‚úÖ T√¢che '{task2.title}' cr√©√©e")

        task3 = Task.objects.create(
            project=project1,
            title="API clients v1",
            description="D√©veloppement de l'API pour les clients",
            status="done",
            priority="high",
            assignee=romain,
            due_date=timezone.now().date() - timezone.timedelta(days=1)
        )
        print(f"‚úÖ T√¢che '{task3.title}' cr√©√©e")

        task4 = Task.objects.create(
            project=project2,
            title="Interface utilisateur mobile",
            description="D√©veloppement de l'interface mobile",
            status="doing",
            priority="high",
            assignee=thibaud,
            due_date=timezone.now().date() + timezone.timedelta(days=5)
        )
        print(f"‚úÖ T√¢che '{task4.title}' cr√©√©e")

        # Cr√©er des sous-t√¢ches
        SubTask.objects.create(
            task=task1,
            title="Configuration Docker",
            is_done=True
        )
        SubTask.objects.create(
            task=task1,
            title="Tests automatis√©s",
            is_done=False
        )
        print("‚úÖ Sous-t√¢ches cr√©√©es")

        # Cr√©er des commentaires
        Comment.objects.create(
            task=task1,
            author=romain,
            content="Pipeline configur√© avec succ√®s ‚úÖ"
        )
        print("‚úÖ Commentaires cr√©√©s")

        # Cr√©er des documents
        Doc.objects.create(
            title="Convention de code",
            content="R√®gles de nommage, revues de code, et standards CI/CD pour l'√©quipe",
            category="process",
            author=romain
        )

        Doc.objects.create(
            title="Guide d'installation",
            content="Instructions pour configurer l'environnement de d√©veloppement local",
            category="tech",
            author=romain
        )
        print("‚úÖ Documents cr√©√©s")

        # Cr√©er des entr√©es de temps
        TimeEntry.objects.create(
            task=task3,
            user=romain,
            started_at=timezone.now() - timezone.timedelta(hours=3),
            ended_at=timezone.now() - timezone.timedelta(hours=1),
            duration_minutes=120,
            description="D√©veloppement API clients"
        )

        TimeEntry.objects.create(
            task=task1,
            user=romain,
            started_at=timezone.now() - timezone.timedelta(hours=5),
            ended_at=timezone.now() - timezone.timedelta(hours=3),
            duration_minutes=120,
            description="Configuration CI/CD"
        )
        print("‚úÖ Entr√©es de temps cr√©√©es")

        # Cr√©er des √©v√©nements
        Event.objects.create(
            title="R√©union √©quipe hebdomadaire",
            description="Point hebdomadaire sur l'avancement des projets",
            event_type="meeting",
            start_datetime=timezone.now() + timezone.timedelta(days=1, hours=9),
            end_datetime=timezone.now() + timezone.timedelta(days=1, hours=10),
            all_day=False,
            location="Salle de r√©union",
            user=romain,
            project=project1,
            color="#8B5CF6"
        )

        Event.objects.create(
            title="Focus Time - D√©veloppement",
            description="Session de d√©veloppement concentr√©",
            event_type="focus",
            start_datetime=timezone.now() + timezone.timedelta(days=2, hours=14),
            end_datetime=timezone.now() + timezone.timedelta(days=2, hours=16),
            all_day=False,
            location="",
            user=romain,
            task=task1,
            color="#EF4444"
        )

        Event.objects.create(
            title="Deadline - Landing Page",
            description="√âch√©ance pour la livraison de la landing page",
            event_type="deadline",
            start_datetime=timezone.now() + timezone.timedelta(days=1),
            end_datetime=timezone.now() + timezone.timedelta(days=1),
            all_day=True,
            location="",
            user=thibaud,
            task=task2,
            color="#DC2626"
        )
        print("‚úÖ √âv√©nements cr√©√©s")

        # Statistiques finales
        stats = {
            'users': User.objects.count(),
            'projects': Project.objects.count(),
            'tasks': Task.objects.count(),
            'events': Event.objects.count(),
            'time_entries': TimeEntry.objects.count()
        }

        print("üéâ Initialisation termin√©e !")
        print(f"üìä Statistiques :")
        print(f"   - {stats['users']} utilisateurs")
        print(f"   - {stats['projects']} projets")
        print(f"   - {stats['tasks']} t√¢ches")
        print(f"   - {stats['events']} √©v√©nements")
        print(f"   - {stats['time_entries']} entr√©es de temps")
        print("‚úÖ Le site est maintenant pr√™t √† √™tre utilis√© !")

    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des donn√©es : {str(e)}")
        return False

if __name__ == "__main__":
    main()
